version: '3.2'

services:
  api_gateway:
    tty: true
    container_name: api_gateway
    build:
      context: .
      dockerfile: api_gateway_Dockerfile
    user: root
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_LOGIN=stud
      - DB_PASSWORD=stud
      - DB_DATABASE=archdb

      - MONGO_HOST=mongodb
      - MONGO_PORT=27017
      - MONGO_DATABASE=arch

      - CACHE_HOST=cache
      - CACHE_PORT=6379

      - USER_HOST=user_service
      - USER_PORT=8080

      - MESSAGE_HOST=message_service
      - MESSAGE_PORT=8080

      - POST_HOST=post_service
      - POST_PORT=8080

    entrypoint: /bin/sh -c "lab5/start_api_gateway.sh"
    ports:
      - 8888:8080
    networks:
      - arch-network
  
  user_service:
    tty: true
    container_name: user_service
    build:
      context: .
      dockerfile: user_app_Dockerfile
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_LOGIN=stud
      - DB_PASSWORD=stud
      - DB_DATABASE=archdb

      - MONGO_HOST=mongodb
      - MONGO_PORT=27017
      - MONGO_DATABASE=arch

      - CACHE_HOST=cache
      - CACHE_PORT=6379

      - USER_HOST=user_service
      - USER_PORT=8080

      - MESSAGE_HOST=message_service
      - MESSAGE_PORT=8080

      - POST_HOST=post_service
      - POST_PORT=8080

    # скрипт пересоздаст таблицу users и добавит в нее заданное количетсво сгенерированных строк
    entrypoint: /bin/sh -c "lab5/start_and_gen_users.sh 3"
    depends_on:
      db:
        condition: service_healthy
    ports:
      - 8080:8080
    networks:
      - arch-network

  post_service:
    tty: true
    container_name: post_service
    build:
      context: .
      dockerfile: post_app_Dockerfile
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_LOGIN=stud
      - DB_PASSWORD=stud
      - DB_DATABASE=archdb

      - MONGO_HOST=mongodb
      - MONGO_PORT=27017
      - MONGO_DATABASE=arch

      - CACHE_HOST=cache
      - CACHE_PORT=6379

      - USER_HOST=user_service
      - USER_PORT=8080

      - MESSAGE_HOST=message_service
      - MESSAGE_PORT=8080

      - POST_HOST=post_service
      - POST_PORT=8080

    entrypoint: /bin/sh -c "lab5/start_and_gen_posts.sh 10 3"
    depends_on:
      mongodb:
        condition: service_healthy
    ports:
      - 8081:8080
    networks:
      - arch-network

  message_service:
    tty: true
    container_name: message_service
    build:
      context: .
      dockerfile: message_app_Dockerfile
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_LOGIN=stud
      - DB_PASSWORD=stud
      - DB_DATABASE=archdb

      - MONGO_HOST=mongodb
      - MONGO_PORT=27017
      - MONGO_DATABASE=arch

      - CACHE_HOST=cache
      - CACHE_PORT=6379

      - USER_HOST=user_service
      - USER_PORT=8080

      - MESSAGE_HOST=message_service
      - MESSAGE_PORT=8080

      - POST_HOST=post_service
      - POST_PORT=8080

    entrypoint: /bin/sh -c "lab5/start_and_gen_messages.sh 10 3"
    depends_on:
      mongodb:
        condition: service_healthy
    ports:
      - 8082:8080
    networks:
      - arch-network

  db:
    container_name: postgres
    image: postgres:15
    environment:
      - POSTGRES_USER=stud
      - POSTGRES_PASSWORD=stud
      - PGDATA=/data/postgres
      - POSTGRES_DB=archdb
    volumes:
      - db:/data/postgres
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -h postgres -p 5432 -d archdb" ]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - arch-network

  mongodb:
    image: mongo:5.0
    container_name: mongodb
    restart: on-failure
    networks:
      - arch-network
    volumes:
      - mongodb:/data/db
      - ./mongo-init.sh:/docker-entrypoint-initdb.d/mongo-init.sh:ro
    ports:
      - '27017:27017'
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s
  
  cache:
    container_name: cache
    image: redis:6.2-alpine
    restart: always
    ports:
      - '6379:6379'
    command: redis-server --save 20 1 --loglevel warning 
    networks:
      - arch-network
    volumes: 
      - cache:/data

volumes:
  db:
  cache:
  mongodb:

networks:
  arch-network:
    driver: "bridge"
    external: false